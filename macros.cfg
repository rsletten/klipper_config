[delayed_gcode LightsTurnOn]
initial_duration: 1
gcode:
    SET_LED LED=CaseLights RED=1 GREEN=1 BLUE=1

[gcode_macro CG28]
gcode:
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=True
	{% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=False

[gcode_macro HEATSOAK]
gcode:
    Red
    M117 Heat Soaking...
    SET_FAN_SPEED FAN=Nevermore SPEED=1
	M104 S150 ; set hotend to 150 and don't wait
	M140 S{ params.HEATSOAK_TEMP|default(0)|int } ; heat bed and don't wait
	CG28 ; conditional home
	G90 ; absolute positioning
	G1 X55 Y350 F6800 ; Move to bucket

[gcode_macro SWIPENOZZLE]
gcode:
	CG28
    G0 F5000
	SAVE_GCODE_STATE NAME=SWIPENOZZLE
    BLOBIFIER_CLEAN
	RESTORE_GCODE_STATE NAME=SWIPENOZZLE MOVE=1 ; move back to where we were

[gcode_macro BUCKET]
gcode:
	CG28
	G90
	G0 X55 Y350 Z25 F5000

[gcode_macro UNLOAD_FILAMENT]
gcode:
	M83                    # set extruder to relative extrusion
	G90                    # set toolhead to absolute position
	G1 Z80 F100000         
	G1 X150 Y50 F100000    # move up and to front/center to straighten filament path
	G1 E3  F300            # extrude slowly to soften tip of filament
	G1 E-30 F100000        # quickly yank filament back clear of hotend
	G1 E-80 F1800          # ensure filament is clear of extruder gears
	M82                    # set extruder to absolute extrusion

[gcode_macro LOAD_FILAMENT]
gcode:
    M83                    # set extruder to relative extrusion
    G90                    # set toolhead to absolute position
    G1 Z80 F100000
    G1 X150 Y50 F100000    # move up and to front/center to straighten filament path
    G1 E75 F300            # extrude filament through into hotend
    G1 E30 F240            # slowly extrude through hotend to partially purge previous filament
    M82                    # set extruder to absolute extrusion

[gcode_macro PURGE_LINE]
gcode:

  G0 X340 Y50 F3000              ; Go to side
  G0 Z0.25                      ;
  G1 E15 F200                    ; purge blob
  G92 E0                        ; zero the extruded length
  G1 Y330 E7.5 F800              ; Extrude purge line
  #G1 Y300 E-.1 F800              ; Retract while wiping on purged line
  G1 Z4                          ; lift z

[gcode_macro PARKCENTER]
gcode:
	CG28
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500	
	RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro ZUP]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.01 MOVE=1   ; move closer during print to adjust squish
    
[gcode_macro ZDOWN]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1

[gcode_macro LightsOff]
gcode:
    SET_LED LED=CaseLights VALUE=0
[gcode_macro LightsOn]
gcode:
    SET_LED LED=CaseLights RED=1 GREEN=1 BLUE=1
[gcode_macro Red]
gcode:
    SET_LED LED=CaseLights RED=1 GREEN=0 BLUE=0
[gcode_macro Blue]
gcode:
    SET_LED LED=CaseLights RED=0 GREEN=0 BLUE=1
[gcode_macro Green]
gcode:
    SET_LED LED=CaseLights RED=0 GREEN=1 BLUE=0
[gcode_macro Purple]
gcode:
    SET_LED LED=CaseLights RED=1 GREEN=0 BLUE=1
[gcode_macro Yellow]
gcode:
    SET_LED LED=CaseLights RED=1 GREEN=1 BLUE=0
[gcode_macro White]
gcode:
    SET_LED LED=CaseLights RED=1 GREEN=1 BLUE=1

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    CG28
    QUAD_GANTRY_LEVEL
    G28
    G0 X175 Y175 Z30 F3600
    RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro PRINT_START]
gcode:
    {% set BED = params.BED|int %} ; Get bed temp from gcode
    {% set HOTEND = params.HOTEND|int %} ; Get nozzle temp from gcode
    {% set CHAMBERTEMP = params.CHAMBERTEMP|default(0)|int %} ; Get chamber temp from gcode
    Red
    STATUS_HEATING
    HEATSOAK heatsoak_temp={BED}
    M190 S{BED} # wait for bed temperature
    TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber" MINIMUM={CHAMBERTEMP}
    Yellow
    M117 Initializing...
    G90
    BED_MESH_CLEAR
    STATUS_HOMING
    G32                            ; home all axes
    STATUS_MESHING
    BED_MESH_CALIBRATE ADAPTIVE=1
    BUCKET
    Red
    STATUS_PRINTING
    M109 S{HOTEND} # wait for hotend temperature
    G1 Z20 F3000                   ; move nozzle away from bed
    White
    STATUS_PRINTING
    M117

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}

    #SFS_DISABLE
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-15.0 F1800                 ; retract filament

    TURN_OFF_HEATERS

    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    M84
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    Green
    status_part_ready
    DISABLE_FILAMENT_SENSOR
    M117
    UPDATE_DELAYED_GCODE ID=filter_off DURATION=360

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    G92 E0
    G1 E-15.0 F1800
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE

[gcode_macro HOME]
gcode:
    CG28
    G90
    G1 X175 Y175 Z50 F7800

[gcode_macro M600]
gcode:
    PAUSE                ; Pause

[gcode_macro PRIME_LINE]
gcode:
    # Move Z up a little to prevent scratching the surface
    G1 Z1.0 F3000

    # Move to prime line position
    G1 X1 Y40 F5000.0

    # Move Z down to begin prime line
    G1 z0.2 F5000.0

    # Reset Extruder
    M83
    G92 E0

    # Draw prime lines
    G1 X1 Y200.0 Z0.3 F1500.0 E15
    G1 X1.3 Y200.0 Z0.3 F5000.0
    G1 X1.3 Y40 Z0.3 F1500.0 E30

    # Reset Extruder
    G92 E0

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
description: Conform a moving, twistable gantry to the shape of a stationary bed
gcode:
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=qgling VALUE=True
    CG28
    _QUAD_GANTRY_LEVEL
    HOME
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=qgling VALUE=False

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        #SFS_ENABLE
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
        M117 Resuming Print
        WHITE
    {% endif %}

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        #SFS_DISABLE
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

